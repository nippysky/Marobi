// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-client"
}

/**
 * ─────────────────────────── Enums ───────────────────────────
 */
enum ProductStatus {
  Draft
  Published
  Archived
}

enum OrderStatus {
  Processing
  Shipped
  Delivered
  Cancelled
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

enum OrderChannel {
  ONLINE
  OFFLINE
}

enum JobRole {
  SystemAdministrator
  DispatchCoordinator
  OrderProcessingSpecialist
  ProductCatalogManager
  CustomerSupportRep
}

enum UserRole {
  SuperAdmin
  ProductAdmin
  OrderAdmin
  DispatchUser
  SupportUser
}

enum RefundStatus {
  Pending
  Completed
  Failed
}

/**
 * How delivery is priced
 */
enum DeliveryPricingMode {
  FIXED // static fee stored on DeliveryOption.baseFee
  EXTERNAL // fee is fetched from an external provider at checkout
}

/**
 * ─────────────────────────── Models ───────────────────────────
 */

model Customer {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  email           String    @unique
  phone           String
  passwordHash    String?
  deliveryAddress String?
  billingAddress  String?
  country         String?
  state           String?
  registeredAt    DateTime  @default(now())
  lastLogin       DateTime?

  orders        Order[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  emailVerified           Boolean   @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
}

model Staff {
  id                String        @id @default(cuid())
  firstName         String
  middleName        String?       @default("")
  lastName          String
  email             String        @unique
  phone             String
  passwordHash      String
  jobRoles          JobRole[]     @default([])
  access            UserRole
  orders            Order[]
  offlineSales      OfflineSale[]
  createdAt         DateTime      @default(now())
  emailVerified     Boolean       @default(true)
  dateOfBirth       DateTime?
  dateOfEmployment  DateTime?     @default(now())
  dateOfResignation DateTime?
  address           String?
  emailPersonal     String?
  guarantorName     String?
  guarantorAddress  String?
  guarantorPhone    String?
  resetToken        String?
  resetTokenExpiry  String?
  lastLogin         DateTime?
}

model Category {
  slug        String   @id
  name        String
  description String?
  bannerImage String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[] @relation("ProductToCategory")

  @@index([isActive, sortOrder])
  @@index([name])
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  images        String[]       @default([])
  categorySlug  String
  category      Category       @relation("ProductToCategory", fields: [categorySlug], references: [slug])
  priceNGN      Float?
  priceUSD      Float?
  priceEUR      Float?
  priceGBP      Float?
  sizeMods      Boolean        @default(false)
  status        ProductStatus  @default(Draft)
  videoUrl      String?
  variants      Variant[]
  reviews       Review[]
  averageRating Float          @default(0)
  ratingCount   Int            @default(0)
  wishlistItems WishlistItem[]
  createdAt     DateTime       @default(now())

  @@index([categorySlug])
  @@index([status, createdAt])
}

model Variant {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color     String
  size      String
  stock     Int
  weight    Float?
  createdAt DateTime @default(now())

  orderItems OrderItem[]

  @@unique([productId, color, size], name: "product_color_size")
  @@index([productId])
}

model Review {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  rating     Int
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, customerId], name: "product_customer_unique_review")
  @@index([productId])
  @@index([customerId])
  @@index([rating])
}

/**
 * Only courier options exist (no pickup).
 * - FIXED: charge baseFee (optionally in baseCurrency).
 * - EXTERNAL: fetch from provider (DHL/FedEx/etc) at checkout.
 */
model DeliveryOption {
  id           String              @id @default(cuid())
  name         String // e.g., "Local Courier", "International Courier"
  provider     String? // e.g., "LocalCourier", "DHL", "FedEx"
  pricingMode  DeliveryPricingMode @default(FIXED)
  baseFee      Float? // used when pricingMode = FIXED
  baseCurrency Currency? // currency of baseFee (optional; omit for EXTERNAL)
  active       Boolean             @default(true)
  metadata     Json? // zones, rules, external IDs, etc.
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  orders Order[] @relation("OrderDeliveryOption")

  @@index([active, pricingMode])
  @@index([provider])
}

model Order {
  id                String      @id @default(uuid())
  status            OrderStatus @default(Processing)
  currency          Currency
  totalAmount       Float
  totalNGN          Int
  paymentMethod     String
  paymentReference  String?     @unique
  paymentProviderId String?
  paymentVerified   Boolean     @default(false)
  createdAt         DateTime    @default(now())

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  guestInfo  Json?

  staff   Staff?  @relation(fields: [staffId], references: [id])
  staffId String?

  items       OrderItem[]
  offlineSale OfflineSale?

  channel OrderChannel @default(ONLINE)

  receiptEmailStatus ReceiptEmailStatus?

  deliveryOption   DeliveryOption? @relation("OrderDeliveryOption", fields: [deliveryOptionId], references: [id])
  deliveryOptionId String?
  deliveryFee      Float?
  deliveryDetails  Json? // tracking, weight, zone, provider quote payload, etc.

  refundedAt          DateTime?
  refundReason        String?
  refundTransactionId String?
  refundStatus        RefundStatus?

  @@index([createdAt])
  @@index([status, createdAt])
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  variant    Variant  @relation(fields: [variantId], references: [id])
  variantId  String
  name       String
  image      String?
  category   String
  quantity   Int
  currency   Currency
  lineTotal  Float
  color      String
  size       String
  hasSizeMod Boolean  @default(false)
  sizeModFee Float    @default(0)
  customSize Json?
}

model OfflineSale {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  staff     Staff    @relation(fields: [staffId], references: [id])
  staffId   String
  timestamp DateTime @default(now())
}

model WishlistItem {
  id         String   @id @default(cuid())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  addedAt    DateTime @default(now())

  @@unique([customerId, productId])
}

model ReceiptEmailStatus {
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String    @id
  attempts    Int       @default(0)
  lastError   String?
  nextRetryAt DateTime?
  sent        Boolean   @default(false)
  deliveryFee Float?
  updatedAt   DateTime  @updatedAt
}

model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String
  eventId   String   @unique
  payload   Json
  createdAt DateTime @default(now())
}

model OrphanPayment {
  id             String    @id @default(cuid())
  reference      String    @unique
  amount         Int
  currency       String
  payload        Json
  firstSeenAt    DateTime  @default(now())
  reconciled     Boolean   @default(false)
  reconciledAt   DateTime?
  resolutionNote String?
}

/**
 * Homepage hero
 */
model HeroSlide {
  id          String  @id @default(cuid())
  imageUrl    String
  headline    String?
  subheadline String?
  ctaText     String?
  ctaUrl      String?
  order       Int     @default(0)
}

/**
 * Size chart
 */
model SizeChart {
  id        String           @id @default(cuid())
  name      String
  entries   SizeChartEntry[]
  updatedAt DateTime         @updatedAt
}

model SizeChartEntry {
  id        String    @id @default(cuid())
  sizeLabel String
  chestMin  Int
  chestMax  Int
  waistMin  Int
  waistMax  Int
  hipMin    Int
  hipMax    Int
  chart     SizeChart @relation(fields: [chartId], references: [id], onDelete: Cascade)
  chartId   String
}
