datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-client"
}

/// Order‐related enums
enum OrderStatus {
  Processing
  Shipped
  Delivered
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

/// Day‐to‐day role within the business
enum JobRole {
  SystemAdministrator   // manage everything, system settings
  DispatchCoordinator      // books courier pickups, prints labels
  OrderProcessingSpecialist // updates statuses, handles refunds
  ProductCatalogManager     // creates/edits products, manages variants
  CustomerSupportRep        // answers tickets, follows up with customers
}

/// UI‐level permissions / access scope
enum UserRole {
  SuperAdmin    // full access
  ProductAdmin  // manage products/catalog
  OrderAdmin    // view/update orders
  DispatchUser  // ship orders, print slips
  SupportUser   // lookup orders, view customers, reports
}

model Customer {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String
  passwordHash String?
  address      String
  registeredAt DateTime @default(now())
  lastLogin    DateTime?
  orders       Order[]
  emailVerified    Boolean   @default(false)
  verificationTokenExpiry DateTime? // when verificationToken expires
  verificationToken String?   // random token for “click to verify email”
  resetToken        String?   // random token for “forgot password”
  resetTokenExpiry  DateTime? // when resetToken expires
}

model Staff {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  email        String        @unique
  phone        String
  passwordHash String
  jobRoles     JobRole[]     @default([]) 
  access       UserRole
  orders       Order[]       // created orders
  offlineSales OfflineSale[] // offline sale logs
  createdAt    DateTime      @default(now())
  emailVerified    Boolean   @default(true) // assume internal staff already verified
  resetToken        String?
  resetTokenExpiry  DateTime?
}

model Product {
  id         String    @id @default(cuid())
  name       String
  image      String
  category   String
  priceNGN   Float?
  priceUSD   Float?
  priceEUR   Float?
  priceGBP   Float?
  variants   Variant[]
  createdAt  DateTime  @default(now())
}

model Variant {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  color      String
  size       String
  stock      Int
  weight     Float?
  createdAt  DateTime @default(now())

  @@unique([productId, color, size], name: "product_color_size")
}

model Order {
  id            String       @id @default(uuid())
  status        OrderStatus  @default(Processing)
  currency      Currency
  totalAmount   Float
  totalNGN      Int
  paymentMethod String
  createdAt     DateTime     @default(now())

  customer     Customer     @relation(fields: [customerId], references: [id])
  customerId   String

  staff        Staff?       @relation(fields: [staffId], references: [id])
  staffId      String?

  items        OrderItem[]
  offlineSale  OfflineSale?
}

model OrderItem {
  id         String    @id @default(cuid())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  name       String
  image      String?
  category   String
  quantity   Int
  currency   Currency
  lineTotal  Float
  color      String
  size       String
}

model OfflineSale {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @unique
  staff      Staff    @relation(fields: [staffId], references: [id])
  staffId    String
  timestamp  DateTime @default(now())
}

/// Hero‐slider banners
model HeroSlide {
  id          String   @id @default(cuid())
  imageUrl    String
  headline    String?  // optional
  subheadline String?  // optional
  ctaText     String?  // optional
  ctaUrl      String?  // optional, front‐end can default to “#”
  order       Int      @default(0)
}

/// Size charts broken into rows
model SizeChart {
  id        String             @id @default(cuid())
  name      String             // e.g. "Men's T-Shirt Chart"
  entries   SizeChartEntry[]
  updatedAt DateTime           @updatedAt
}

model SizeChartEntry {
  id         String    @id @default(cuid())
  sizeLabel  String    // "S", "M", "L", "XL", etc.
  chestMin   Int
  chestMax   Int
  waistMin   Int
  waistMax   Int
  chart      SizeChart @relation(fields: [chartId], references: [id])
  chartId    String
}
