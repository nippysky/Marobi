datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-client"
}

enum ProductStatus {
  Draft
  Published
  Archived
}

enum OrderStatus {
  Processing
  Shipped
  Delivered
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

enum OrderChannel {
  ONLINE 
  OFFLINE 
}

enum JobRole {
  SystemAdministrator
  DispatchCoordinator
  OrderProcessingSpecialist
  ProductCatalogManager
  CustomerSupportRep
}

enum UserRole {
  SuperAdmin
  ProductAdmin
  OrderAdmin
  DispatchUser
  SupportUser
}

enum DeliveryType {
  COURIER
  PICKUP
}

model Customer {
  id                       String         @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String         @unique
  phone                    String
  passwordHash             String?
  deliveryAddress          String?
  billingAddress           String?
  country                  String?
  state                    String?
  registeredAt             DateTime       @default(now())
  lastLogin                DateTime?
  orders                   Order[]
  wishlistItems            WishlistItem[]
  reviews                  Review[]
  emailVerified            Boolean        @default(false)
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  resetToken               String?
  resetTokenExpiry         DateTime?
}

model Staff {
  id                    String             @id @default(cuid())
  firstName             String
  middleName            String?            @default("")
  lastName              String
  email                 String             @unique
  phone                 String
  passwordHash          String
  jobRoles              JobRole[]          @default([])
  access                UserRole
  orders                Order[]
  offlineSales          OfflineSale[]
  createdAt             DateTime           @default(now())
  emailVerified         Boolean            @default(true)
  dateOfBirth           DateTime?
  dateOfEmployment      DateTime?          @default(now())
  dateOfResignation     DateTime?
  address               String?
  emailPersonal         String?
  guarantorName         String?
  guarantorAddress      String?
  guarantorPhone        String?
  resetToken            String?
  resetTokenExpiry      String?
  lastLogin             DateTime?
}

model Category {
  slug        String     @id
  name        String
  description String?
  products    Product[]  @relation("ProductToCategory")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  images         String[]        @default([])
  categorySlug   String
  category       Category        @relation("ProductToCategory", fields: [categorySlug], references: [slug])
  priceNGN       Float?
  priceUSD       Float?
  priceEUR       Float?
  priceGBP       Float?
  sizeMods       Boolean         @default(false)
  status         ProductStatus   @default(Draft)
  videoUrl       String?
  variants       Variant[]
  reviews        Review[]
  averageRating  Float           @default(0)
  ratingCount    Int             @default(0)
  wishlistItems  WishlistItem[]
  createdAt      DateTime        @default(now())
}

model Variant {
  id         String     @id @default(cuid())
  product    Product    @relation(fields: [productId], references: [id])
  productId  String
  color      String
  size       String
  stock      Int
  weight     Float?
  createdAt  DateTime   @default(now())

  orderItems OrderItem[]

  @@unique([productId, color, size], name: "product_color_size")
}

model Review {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  rating     Int
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, customerId], name: "product_customer_unique_review")
  @@index([productId])
  @@index([customerId])
  @@index([rating])
}

model DeliveryOption {
  id          String      @id @default(cuid())
  name        String      // e.g., "DHL Express", "FedEx", "Walk-in Pickup"
  provider    String?     // e.g., "DHL", "FedEx"; null for generic/pickup
  type        DeliveryType
  active      Boolean     @default(true)
  baseFee     Float       // default delivery/pickup fee
  metadata    Json?       // extensibility (zones, rules, external IDs, etc.)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orders      Order[]     @relation("OrderDeliveryOption")
}

model Order {
  id                  String                @id @default(uuid())
  status              OrderStatus           @default(Processing)
  currency            Currency
  totalAmount         Float
  totalNGN            Int
  paymentMethod       String
  createdAt           DateTime              @default(now())
  customer            Customer?             @relation(fields: [customerId], references: [id])
  customerId          String?
  guestInfo           Json?
  staff               Staff?                @relation(fields: [staffId], references: [id])
  staffId             String?
  items               OrderItem[]
  offlineSale         OfflineSale?
  channel             OrderChannel          @default(ONLINE)
  receiptEmailStatus  ReceiptEmailStatus?
  deliveryOption      DeliveryOption?       @relation("OrderDeliveryOption", fields: [deliveryOptionId], references: [id])
  deliveryOptionId    String?
  deliveryFee         Float?                // actual fee charged (can override baseFee)
  deliveryDetails     Json?                 // e.g., tracking number, pickup notes, etc.
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  variant    Variant  @relation(fields: [variantId], references: [id])
  variantId  String
  name       String
  image      String?
  category   String
  quantity   Int
  currency   Currency
  lineTotal  Float
  color      String
  size       String
  hasSizeMod Boolean  @default(false)
  sizeModFee Float    @default(0)
  customSize Json?
}

model OfflineSale {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @unique
  staff      Staff    @relation(fields: [staffId], references: [id])
  staffId    String
  timestamp  DateTime @default(now())
}

model WishlistItem {
  id          String    @id @default(cuid())
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  addedAt     DateTime  @default(now())

  @@unique([customerId, productId])
}

model ReceiptEmailStatus {
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      String    @id
  attempts     Int       @default(0)
  lastError    String?
  nextRetryAt  DateTime?
  sent         Boolean   @default(false)
  deliveryFee  Float? 
  updatedAt    DateTime  @updatedAt
}

model HeroSlide {
  id          String   @id @default(cuid())
  imageUrl    String
  headline    String?
  subheadline String?
  ctaText     String?
  ctaUrl      String?
  order       Int      @default(0)
}

model SizeChart {
  id        String             @id @default(cuid())
  name      String
  entries   SizeChartEntry[]
  updatedAt DateTime           @updatedAt
}

model SizeChartEntry {
  id         String    @id @default(cuid())
  sizeLabel  String
  chestMin   Int
  chestMax   Int
  waistMin   Int
  waistMax   Int
  hipMin     Int
  hipMax     Int
  chart      SizeChart @relation(fields: [chartId], references: [id])
  chartId    String
}
